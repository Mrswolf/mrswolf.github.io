<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>swolf的博客</title>
  
  <subtitle>记录我的学习生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mrswolf.github.io/"/>
  <updated>2018-11-20T03:03:05.513Z</updated>
  <id>https://mrswolf.github.io/</id>
  
  <author>
    <name>swolf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>（五）如何在Psychopy中新建窗口</title>
    <link href="https://mrswolf.github.io/zh-cn/2018/11/16/%EF%BC%88%E4%BA%94%EF%BC%89%E5%A6%82%E4%BD%95%E5%9C%A8Psychopy%E4%B8%AD%E6%96%B0%E5%BB%BA%E7%AA%97%E5%8F%A3/"/>
    <id>https://mrswolf.github.io/zh-cn/2018/11/16/（五）如何在Psychopy中新建窗口/</id>
    <published>2018-11-16T13:15:22.000Z</published>
    <updated>2018-11-20T03:03:05.513Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><a id="more"></a><h2 id="新建单窗口"><a href="#新建单窗口" class="headerlink" title="新建单窗口"></a>新建单窗口</h2><p>窗口(windows)是刺激呈现的舞台，任何刺激对象都需要指定其所属的窗口对象。Pyschopy的Window对象位于psychopy.visual模块中，一个最简单的窗口示例如下<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> psychopy <span class="keyword">import</span> visual, event, monitors, core</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据你自己的显示器调整显示器信息</span></span><br><span class="line">mon = monitors.Monitor(</span><br><span class="line">    name=<span class="string">'my_monitor'</span>,</span><br><span class="line">    width=<span class="number">53.704</span>,  <span class="comment"># 显示器宽度，单位cm</span></span><br><span class="line">    distance=<span class="number">45</span>,   <span class="comment"># 被试距显示器距离，单位cm</span></span><br><span class="line">    gamma=<span class="keyword">None</span>,    <span class="comment"># gamma值</span></span><br><span class="line">    verbose=<span class="keyword">False</span>) <span class="comment"># 是否输出详细信息</span></span><br><span class="line">mon.setSizePix((<span class="number">1920</span>, <span class="number">1080</span>)) <span class="comment"># 设置显示器分辨率</span></span><br><span class="line">mon.save() <span class="comment"># 保存显示器信息</span></span><br><span class="line"></span><br><span class="line">win = visual.Window(monitor=mon, size=(<span class="number">800</span>, <span class="number">600</span>), fullscr=<span class="keyword">False</span>,</span><br><span class="line">    screen=<span class="number">0</span>, winType=<span class="string">'pyglet'</span>, units=<span class="string">'norm'</span>, allowGUI=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">event.waitKeys() <span class="comment"># 等待按键</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修复或预防原始gamma不能恢复bug(运行Psychopy程序显示器变暗加入以下代码)</span></span><br><span class="line">origLUT = np.round(win.backend._origGammaRamp * <span class="number">65535.0</span>).astype(<span class="string">"uint16"</span>)</span><br><span class="line">origLUT = origLUT.byteswap() / <span class="number">255.0</span></span><br><span class="line">win.backend._origGammaRamp = origLUT</span><br><span class="line">core.quit() <span class="comment"># 退出Psychopy程序</span></span><br></pre></td></tr></table></figure></p><p>Window对象用size参数申明窗口尺寸为800*600像素；fullscr参数决定是否全屏显示；screen参数决定了窗口在哪个显示器上显示，通常0是主显示器；winType参数决定了Psychopy使用的后端程序，有’pyglet’和’pygame’两种选择（Psychopy官方未来主要采用pyglet作为后端程序，我推荐采用pyglet）。</p><h2 id="新建多窗口"><a href="#新建多窗口" class="headerlink" title="新建多窗口"></a>新建多窗口</h2><p>Psychopy也可以同时建立多个窗口对象，注意仅pyglet后端支持多窗口行为。下面的代码展示了如何新建两个位于不同位置的窗口<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> psychopy <span class="keyword">import</span> visual, event, monitors, core</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据你自己的显示器调整显示器信息</span></span><br><span class="line">mon = monitors.Monitor(</span><br><span class="line">    name=<span class="string">'my_monitor'</span>,</span><br><span class="line">    width=<span class="number">53.704</span>,  <span class="comment"># 显示器宽度，单位cm</span></span><br><span class="line">    distance=<span class="number">45</span>,   <span class="comment"># 被试距显示器距离，单位cm</span></span><br><span class="line">    gamma=<span class="keyword">None</span>,    <span class="comment"># gamma值</span></span><br><span class="line">    verbose=<span class="keyword">False</span>) <span class="comment"># 是否输出详细信息</span></span><br><span class="line">mon.setSizePix((<span class="number">1920</span>, <span class="number">1080</span>)) <span class="comment"># 设置显示器分辨率</span></span><br><span class="line">mon.save() <span class="comment"># 保存显示器信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 窗口1在屏幕左上角</span></span><br><span class="line">win1 = visual.Window(monitor=mon, size=(<span class="number">800</span>, <span class="number">600</span>), pos=(<span class="number">0</span>, <span class="number">0</span>), fullscr=<span class="keyword">False</span>,</span><br><span class="line">    screen=<span class="number">0</span>, winType=<span class="string">'pyglet'</span>, units=<span class="string">'norm'</span>, allowGUI=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 窗口2在屏幕右下角</span></span><br><span class="line">win2 = visual.Window(monitor=mon, size=(<span class="number">800</span>, <span class="number">600</span>), pos=(<span class="number">1120</span>, <span class="number">480</span>), fullscr=<span class="keyword">False</span>,</span><br><span class="line">    screen=<span class="number">0</span>, winType=<span class="string">'pyglet'</span>, units=<span class="string">'norm'</span>, allowGUI=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">event.waitKeys() <span class="comment"># 等待按键</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修复或预防原始gamma不能恢复bug(运行Psychopy程序显示器变暗加入以下代码)</span></span><br><span class="line">origLUT = np.round(win1.backend._origGammaRamp * <span class="number">65535.0</span>).astype(<span class="string">"uint16"</span>)</span><br><span class="line">origLUT = origLUT.byteswap() / <span class="number">255.0</span></span><br><span class="line">win1.backend._origGammaRamp = origLUT</span><br><span class="line">win2.backend._origGammaRamp = origLUT</span><br><span class="line">core.quit() <span class="comment"># 退出Psychopy程序</span></span><br></pre></td></tr></table></figure></p><p>pos参数调整窗口在屏幕上显示的位置，单位始终为像素，这里的坐标系不同于Psychopy的坐标系，以屏幕的左上角为原点，向下和向右分别为y轴和x轴的正方向。Window对象有很多可调整的参数和行为，具体细节可见<a href="http://www.psychopy.org/api/visual/window.html#psychopy.visual.Window" target="_blank" rel="noopener">官方文档Window API</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="psychopy系列" scheme="https://mrswolf.github.io/categories/psychopy%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="psychopy" scheme="https://mrswolf.github.io/tags/psychopy/"/>
    
  </entry>
  
  <entry>
    <title>（二）Psychopy坐标系统与显示器设置</title>
    <link href="https://mrswolf.github.io/zh-cn/2018/11/11/%EF%BC%88%E4%BA%8C%EF%BC%89Psychopy%E5%9D%90%E6%A0%87%E7%B3%BB%E7%BB%9F%E4%B8%8E%E6%98%BE%E7%A4%BA%E5%99%A8%E8%AE%BE%E7%BD%AE/"/>
    <id>https://mrswolf.github.io/zh-cn/2018/11/11/（二）Psychopy坐标系统与显示器设置/</id>
    <published>2018-11-11T13:20:16.000Z</published>
    <updated>2018-11-15T06:23:46.909Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="Psychopy的坐标系统"><a href="#Psychopy的坐标系统" class="headerlink" title="Psychopy的坐标系统"></a>Psychopy的坐标系统</h2><p>Psychopy提供了5种不同的坐标单位(unit)，使用者只需提供刺激对应的坐标单位，Psychopy会自动计算刺激所对应的像素点范围。这种多坐标单位的好处在于，能够开发和设备无关的刺激呈现，不需要每次实验都对刺激的大小和呈现位置进行调整。其劣势则是需要精心挑选刺激对应的坐标单位，有时还要在不同单位间进行转换，一不小心就容易出错。<br><a id="more"></a><br>无论何种单位，Psychopy的坐标系统始终以屏幕中心为原点(0, 0)，原点向上为正y轴，原点向右为正x轴。不同的Psychopy坐标单位的所需参考对象不同，例如norm、height的坐标单位是针对视窗对象(window)，而cm、deg、degFlat、degFlatPos、pix则是针对屏幕(screen)。<br><img src="/zh-cn/2018/11/11/（二）Psychopy坐标系统与显示器设置/coordinate.png" title="坐标系统"></p><h3 id="归一化单位-norm"><a href="#归一化单位-norm" class="headerlink" title="归一化单位(norm)"></a>归一化单位(norm)</h3><p>归一化单位可能是最常用的单位之一。在该单位下，window左下角坐标为(-1, -1)，window右上角坐标为(1, 1)。如图为长宽均为0.5的三个色块，其中心点分别位于(-0,5, 0)、(0, 0)和(0.5, 0)坐标下，注意window的分辨率为800*600，因此尽管色块的归一化长宽均为0.5，但其长实际为200像素点，宽实际为150像素点，表现为长方形。<br><img src="/zh-cn/2018/11/11/（二）Psychopy坐标系统与显示器设置/norm.png" title="norm单位"></p><h3 id="像素单位-pix"><a href="#像素单位-pix" class="headerlink" title="像素单位(pix)"></a>像素单位(pix)</h3><p>像素单位的坐标范围取决于screen的宽、高像素点数，假设screen宽度有w个像素点，高度有h个像素点，则screen左下角坐标为(-w/2, -h/2)，右上角坐标为(w/2, h/2)。</p><h3 id="厘米单位-cm"><a href="#厘米单位-cm" class="headerlink" title="厘米单位(cm)"></a>厘米单位(cm)</h3><p>厘米单位的坐标范围取决于screen的宽度和高度，假设screen宽度为w厘米，高度为h厘米，则screen左下角坐标为(-w/2, -h/2)，右上角坐标为(w/2, h/2)，每cm所代表的像素长度则由screen的像素点数确定。</p><h3 id="高度单位-height"><a href="#高度单位-height" class="headerlink" title="高度单位(height)"></a>高度单位(height)</h3><p>高度单位的坐标范围取决于window的宽高比。无论何种window，y轴的坐标范围始终是从-0.5到0.5。因此，如果window是4：3的尺寸，则window左下角坐标为(-0.6667, -0.5)，window右上角坐标为(0.6667, 0.5)；如果是16：9的尺寸，则window左下角坐标为(-0.8, -0.5)，window右上角坐标为(0.8, 0.5)。如图是800*600的window，色块的长宽均为1，则色块会占满y轴方向的所有空间。<br><img src="/zh-cn/2018/11/11/（二）Psychopy坐标系统与显示器设置/height.png" title="height单位"></p><h3 id="视角-deg-degFlatPos-degFlat"><a href="#视角-deg-degFlatPos-degFlat" class="headerlink" title="视角(deg, degFlatPos, degFlat)"></a>视角(deg, degFlatPos, degFlat)</h3><p>视角单位是五种单位种最复杂的坐标单位，使用该单位，不仅要知道屏幕的大小、像素点的多少，还要知道被试距离屏幕的距离，Psychopy提供三种不同的视角单位deg、degFlatPos和degFlat。<br><img src="/zh-cn/2018/11/11/（二）Psychopy坐标系统与显示器设置/deg.png" title="视角单位"></p><h4 id="deg"><a href="#deg" class="headerlink" title="deg"></a>deg</h4><p>deg单位默认视角在screen所有位置具有相同的像素长度，即在screen边缘位置和中心位置会产生相同大小的刺激图形。采用deg单位可以认为screen是球形曲面，而人眼则是球心，每度视角在screen所投射的像素长度完全相同。上图deg行红绿蓝三色块的长宽均为5度，位置分别为(-25, 10)、(0, 10)、(25, 10)。</p><h4 id="degFlatPos"><a href="#degFlatPos" class="headerlink" title="degFlatPos"></a>degFlatPos</h4><p>degFlatPos在deg的基础上考虑了位置在水平屏幕上的修正，远离屏幕中心的位置，刺激间的间隔越大，但是不改变刺激本身的大小。上图degFlatPos行三色块的参数同deg行完全相同，但因为采用了degFlatPos单位，红蓝色块距离绿色色块的距离要比deg行更大。</p><h4 id="degFlat"><a href="#degFlat" class="headerlink" title="degFlat"></a>degFlat</h4><p>degFlat不仅修正了位置信息，还修正了刺激的大小，因此，远离屏幕中心的位置，刺激尺寸越大，刺激间的间隔也越大。上图degFlat行三色块的参数同deg行完全相同，但因为采用了degFlat单位，不仅红蓝色块距离绿色色块的距离要比deg行更大，红蓝色块的形状也产生了畸变。</p><h3 id="Psychopy单位转换"><a href="#Psychopy单位转换" class="headerlink" title="Psychopy单位转换"></a>Psychopy单位转换</h3><p>Psychopy提供了不同单位间的转换方法，位于<a href="http://www.psychopy.org/api/misc.html" target="_blank" rel="noopener">psychopy.misc</a>模块中。</p><h2 id="Psychopy显示器信息设置"><a href="#Psychopy显示器信息设置" class="headerlink" title="Psychopy显示器信息设置"></a>Psychopy显示器信息设置</h2><p>以上提到的pix、cm、deg、degFlatPos和degFlag均需要提供显示器信息（尺寸、分辨率等），Psychopy提供两种方式设定显示设备信息。</p><h3 id="Moniter-Center界面"><a href="#Moniter-Center界面" class="headerlink" title="Moniter Center界面"></a>Moniter Center界面</h3><p>Anaconda Prompt下切换到<code>%Anaconda的安装目录%\Anaconda\Lib\site-packages\psychopy\monitors</code>目录，输入命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python MonitorCenter.py</span><br></pre></td></tr></table></figure><br><img src="/zh-cn/2018/11/11/（二）Psychopy坐标系统与显示器设置/monitor_center.png" title="Moniter Center界面"></p><h3 id="Moniter类"><a href="#Moniter类" class="headerlink" title="Moniter类"></a>Moniter类</h3><p>Moniter类位于<a href="http://www.psychopy.org/api/monitors.html" target="_blank" rel="noopener">psychopy.monitors</a>模块中，负责显示器参数和刺激环境设置。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> psychopy <span class="keyword">import</span> monitors</span><br><span class="line">mon = monitors.Monitor(</span><br><span class="line">    name=<span class="string">'my_monitor'</span>,</span><br><span class="line">    width=<span class="number">53.704</span>,  <span class="comment"># 显示器宽度，单位cm</span></span><br><span class="line">    distance=<span class="number">45</span>,   <span class="comment"># 被试距显示器距离，单位cm</span></span><br><span class="line">    gamma=<span class="number">1</span>,       <span class="comment"># gamma值</span></span><br><span class="line">    verbose=<span class="keyword">False</span>) <span class="comment"># 是否输出详细信息</span></span><br><span class="line">mon.setSizePix((<span class="number">1920</span>, <span class="number">1080</span>)) <span class="comment"># 设置显示器分辨率</span></span><br><span class="line">mon.save() <span class="comment"># 保存显示器信息</span></span><br></pre></td></tr></table></figure><br>Monitor.save()函数保存的显示器信息位于<code>C:\Users\%USER_NAME%\AppData\Roaming\psychopy2\monitors</code>文件夹下，文件格式为JSON。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h2 id=&quot;Psychopy的坐标系统&quot;&gt;&lt;a href=&quot;#Psychopy的坐标系统&quot; class=&quot;headerlink&quot; title=&quot;Psychopy的坐标系统&quot;&gt;&lt;/a&gt;Psychopy的坐标系统&lt;/h2&gt;&lt;p&gt;Psychopy提供了5种不同的坐标单位(unit)，使用者只需提供刺激对应的坐标单位，Psychopy会自动计算刺激所对应的像素点范围。这种多坐标单位的好处在于，能够开发和设备无关的刺激呈现，不需要每次实验都对刺激的大小和呈现位置进行调整。其劣势则是需要精心挑选刺激对应的坐标单位，有时还要在不同单位间进行转换，一不小心就容易出错。&lt;br&gt;
    
    </summary>
    
      <category term="psychopy系列" scheme="https://mrswolf.github.io/categories/psychopy%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="psychopy" scheme="https://mrswolf.github.io/tags/psychopy/"/>
    
  </entry>
  
  <entry>
    <title>（一）Psychopy安装和使用</title>
    <link href="https://mrswolf.github.io/zh-cn/2018/11/10/%EF%BC%88%E4%B8%80%EF%BC%89Psychopy%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://mrswolf.github.io/zh-cn/2018/11/10/（一）Psychopy安装和使用/</id>
    <published>2018-11-10T12:59:35.000Z</published>
    <updated>2018-11-16T13:37:29.305Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="什么是Psychopy"><a href="#什么是Psychopy" class="headerlink" title="什么是Psychopy"></a>什么是Psychopy</h2><p>Psychopy是基于Python的心理学实验设计软件，由英国诺丁汉大学的Jon Peirce主持开发。Psychopy结合了OpenGL的图形优势和Python的语法特性，给科学家们提供了快速构建高性能的图形刺激界面的工具。<br><a id="more"></a></p><h2 id="我为什么选择Psychopy"><a href="#我为什么选择Psychopy" class="headerlink" title="我为什么选择Psychopy"></a>我为什么选择Psychopy</h2><p>在我研究生阶段，我做脑机接口实验编写刺激界面的工具主要是Matlab平台的Psychtoolbox。很早之前，我也用过e-Prime，但很快就放弃了。e-Prime提供GUI界面，简单易学，但是无法设计复杂的刺激界面。相比之下，Psychtoolbox能够实现大多数脑-机接口刺激界面，同时基于Matlab平台，集成了大量简单方便的函数，对科研人员的编程要求不高，基本上是科研人员的第一选择。</p><p>然而对我而言，我一直不喜欢Matlab，理由有三：</p><ol><li><strong>Matlab不是一门真正的通用编程语言</strong>。Matlab本质是为不懂CS的科研人员设计的编程语言，很难进行普通程序的开发，例如GUI、网络编程等等。脑机接口一个很重要的方面是开发和机器交互的程序，这些程序有时很注重性能，Matlab开发这些功能不太方便。</li><li><strong>Matlab是收费的商业软件</strong>，其工具包的价格不是穷学生能承受的。尽管天朝存在“破解版”这种Matlab版本，MathWorks公司对科研人员使用破解版也视而不见，但谁知道以后会怎么样呢？为了不受制于人，我决定转向开源软件阵营。</li><li><strong>最重要的一点，学Matlab找不到工作</strong>。研究生转博士期间，我也跟着校招参加了不少面试。很遗憾，在脑机接口领域，对口的工作几乎没有；就算扩大了从生物医学工程专业来说，大部分工作机会还是集中在医疗图像领域。这些领域的招聘要求中可没有熟练使用Matlab这一项，大部分还是C/C++、Java等通用编程语言。</li></ol><p>综上所述，我在博士阶段毅然决然的放弃了Matlab，放弃了以前所有的代码，转向了Python。而在Python平台下，Psychopy几乎是唯一选择（个人认为）。Psychopy目前虽然仍处在开发阶段，还有不少bug，官方文档也不完善，但是官方社区和开发者相当活跃，使用人数也越来越多，借着Python语言的上升势头，我认为不久之后Psychopy很可能成为科研工作者的首选。</p><p>当然由于Psychopy还很年轻，我在Psychopy实践过程中遇到许多问题。写Psychopy系列博文的目的是记录我的开发经验，给想使用Psyhcopy却遇到问题的朋友提供帮助。</p><h2 id="安装Anaconda和Psychopy"><a href="#安装Anaconda和Psychopy" class="headerlink" title="安装Anaconda和Psychopy"></a>安装Anaconda和Psychopy</h2><p>Anaconda是一个用于科学计算的Python发行版，集成了大量Python科学计算所需的环境库，提供包管理和环境管理的功能，免去了手动安装Python及其各种工具包的麻烦。Anaconda支持Linux、Mac和Windows系统，在Windows下几乎是科学计算的唯一选择。目前最新的版本是Anaconda 5.3，支持Python3.7，我推荐安装最新版本。Anaconda的下载地址可在其<a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">官网</a>或<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">清华TUNA镜像站</a>找到。</p><p>Anaconda安装完成后，在其Anaconda Prompt中运行如下命令即可完成Psychopy的安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install psychopy</span><br></pre></td></tr></table></figure></p><blockquote><p>官方文档没有及时更新，其安装步骤还是基于Python2的老版本。Psychopy在2018年7月发布1.90.3版本，宣布支持Python3，安装过程也大为简化，直接使用pip即可安装完成，Windows平台下如果安装过程中报错，很可能是缺少C++编译器，需要先安装Visual Studio及C++开发环境。</p></blockquote><p>在python控制台中运行如下命令检查Psychopy版本<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> psychopy</span><br><span class="line">print(psychopy.__version__)</span><br></pre></td></tr></table></figure></p><h2 id="使用Psychopy"><a href="#使用Psychopy" class="headerlink" title="使用Psychopy"></a>使用Psychopy</h2><p>Psychopy提供两种刺激界面设计方式，一种是类似e-Prime的GUI界面Builder，另一种是普通的脚本编写方式Coder。</p><h3 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h3><p>在Anaconda Prompt中切换到Psychopy的app安装目录，Windows下通常为<code>cd %Anaconda的安装目录%\Anaconda\Lib\site-packages\psychopy\app</code>，在该目录下运行命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python psychopyApp.py -b</span><br></pre></td></tr></table></figure><br><img src="/zh-cn/2018/11/10/（一）Psychopy安装和使用/builder.png" title="Builder界面"><br>Builder的使用在<a href="http://www.psychopy.org/builder/builder.html" target="_blank" rel="noopener">Builder - building experiments in a GUI</a>文档中有详细的介绍，builder很适合设计一些简单的刺激界面，设计完成的界面也可以转换为Coder中的脚本程序。</p><h3 id="Coder"><a href="#Coder" class="headerlink" title="Coder"></a>Coder</h3><p>在Anaconda Prompt中切换到Psychopy的app安装目录，Windows下通常为<code>%Anaconda的安装目录%\Anaconda\Lib\site-packages\psychopy\app</code>，在该目录下运行命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python psychopyApp.py -c</span><br></pre></td></tr></table></figure><br><img src="/zh-cn/2018/11/10/（一）Psychopy安装和使用/coder.png" title="Coder界面"><br>Coder的使用在<a href="http://www.psychopy.org/coder/coder.html" target="_blank" rel="noopener">Coder - writing experiments with scripts</a>文档中有详细的介绍，相比Builder，Coder提供的编程设计方式更加灵活，可以实现更为复杂的刺激界面。当然Coder本身只是提供了开发环境，脚本编写可以在任何编辑器下进行，我很少直接使用Coder，通常会使用Pycharm和Sublime Text来编写程序。</p><h2 id="Psychopy相关资源"><a href="#Psychopy相关资源" class="headerlink" title="Psychopy相关资源"></a>Psychopy相关资源</h2><p>Psychopy的官方文档更新不算及时，大部分文档还是基于Python2的版本，但其官方文档和demo仍然是学习Psychopy的不二之选。如果有问题在官方文档里没有说明，Google也没有相关信息的话，可以去Psychopy的论坛或Jon Peirce的Github提问。</p><p><a href="https://discourse.psychopy.org/" target="_blank" rel="noopener">Psychopy 官方文档</a><br><a href="http://www.psychopy.org/api/api.html" target="_blank" rel="noopener">Psychopy API手册</a><br><a href="https://discourse.psychopy.org/" target="_blank" rel="noopener">Psychopy 论坛</a><br><a href="https://github.com/psychopy/psychopy" target="_blank" rel="noopener">Psychopy Github仓库</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h2 id=&quot;什么是Psychopy&quot;&gt;&lt;a href=&quot;#什么是Psychopy&quot; class=&quot;headerlink&quot; title=&quot;什么是Psychopy&quot;&gt;&lt;/a&gt;什么是Psychopy&lt;/h2&gt;&lt;p&gt;Psychopy是基于Python的心理学实验设计软件，由英国诺丁汉大学的Jon Peirce主持开发。Psychopy结合了OpenGL的图形优势和Python的语法特性，给科学家们提供了快速构建高性能的图形刺激界面的工具。&lt;br&gt;
    
    </summary>
    
      <category term="psychopy系列" scheme="https://mrswolf.github.io/categories/psychopy%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="psychopy" scheme="https://mrswolf.github.io/tags/psychopy/"/>
    
  </entry>
  
  <entry>
    <title>博客测试</title>
    <link href="https://mrswolf.github.io/zh-cn/2018/11/09/%E5%8D%9A%E5%AE%A2%E6%B5%8B%E8%AF%95/"/>
    <id>https://mrswolf.github.io/zh-cn/2018/11/09/博客测试/</id>
    <published>2018-11-09T13:03:15.000Z</published>
    <updated>2018-11-09T13:05:59.344Z</updated>
    
    <content type="html"><![CDATA[<p>本博客记录我在学习过程中的心得</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本博客记录我在学习过程中的心得&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
